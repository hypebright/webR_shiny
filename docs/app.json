[{"name":"app.R","content":"library(shiny)\n\n# Define a list of words for the game\nwords <- c(\"hangman\", \"programming\", \"shiny\", \"webr\", \"webassembly\", \"serviceworker\")\n\nui <- fluidPage(\n  \n  titlePanel(\"Hangman Game\"),\n  \n  mainPanel(\n    h3(\"Guess the word!\"),\n    textOutput(\"word_display\"),\n    br(),\n    textInput(\"guess_input\", \"Enter a letter:\"),\n    tagAppendAttributes(style = \"background-color:steelblue;color:white;\",\n                        actionButton(\"guess_button\", icon = icon(\"lightbulb\"), \"Guess\")),\n    br(),\n    br(),\n    h4(\"Incorrect Guesses:\"),\n    textOutput(\"incorrect_guesses\"),\n    br(),\n    h4(\"Remaining Chances:\"),\n    textOutput(\"remaining_chances\"),\n    br(),\n    tagAppendAttributes(style = \"background-color:orange;color:white;\",\n                        actionButton(\"reset_button\", icon = icon(\"redo\"), \"Reset\"))\n  )\n)\n\nserver <- function(input, output, session) {\n  # Initialize game state\n  game_state <- reactiveValues(\n    word = sample(words, 1),  # Randomly select a word from the list\n    guessed_letters = character(0),  # Store guessed letters\n    incorrect_guesses = 0,  # Count of incorrect guesses\n    remaining_chances = 7  # Total chances before game over\n  )\n  \n  # Function to update game state based on user guess\n  update_game_state <- function() {\n    \n    guess <- tolower(substr(input$guess_input, 1, 1))  # Extract first character of user's guess\n    \n    if (guess %in% game_state$guessed_letters) {\n      # Letter has already been guessed, do nothing\n      return()\n    }\n    \n    game_state$guessed_letters <- c(game_state$guessed_letters, guess)\n    \n    if (!(guess %in% strsplit(game_state$word, \"\")[[1]])) {\n      # Incorrect guess\n      game_state$incorrect_guesses <- game_state$incorrect_guesses + 1\n    }\n    \n    if (game_state$incorrect_guesses >= game_state$remaining_chances) {\n      # Game over\n      showGameOverMessage()\n    }\n  }\n  \n  # Action when the guess button is clicked\n  observeEvent(input$guess_button, {\n    update_game_state()\n  })\n  \n  # Function to display the word with guessed letters filled in\n  output$word_display <- renderText({\n    word <- game_state$word\n    guessed_letters <- game_state$guessed_letters\n    \n    displayed_word <- sapply(strsplit(word, \"\")[[1]], function(x) {\n      if (x %in% guessed_letters) {\n        x\n      } else {\n        \"_\"\n      }\n    })\n    \n    paste(displayed_word, collapse = \" \")\n  })\n  \n  # Display incorrect guesses\n  output$incorrect_guesses <- renderText({\n    if(length(game_state$guessed_letters) == 0){\n      \"No incorrect guesses yet ðŸ‘€ \"\n    } else {\n      paste(game_state$guessed_letters[!(game_state$guessed_letters %in% strsplit(game_state$word, \"\")[[1]])], collapse = \", \")\n    }\n  })\n  \n  # Display remaining chances\n  output$remaining_chances <- renderText({\n    game_state$remaining_chances - game_state$incorrect_guesses\n  })\n  \n  # Function to display game over message\n  showGameOverMessage <- function() {\n    showModal(modalDialog(\n      title = \"Game Over\",\n      paste(\"You ran out of chances! The word was\", game_state$word),\n      easyClose = TRUE\n    ))\n    \n    # Reset game state\n    game_state$word <- sample(words, 1)\n    game_state$guessed_letters <- character(0)\n    game_state$incorrect_guesses <- 0\n  }\n  \n  observeEvent(input$reset_button, {\n    \n    game_state$word <- sample(words, 1)\n    game_state$guessed_letters <- character(0)\n    game_state$incorrect_guesses <- 0\n    game_state$remaining_chances <- 7\n    \n    updateTextInput(session = session,\n                    inputId = \"guess_input\",\n                    value = \"\")\n    \n  })\n}\n\nshinyApp(ui, server)\n","type":"text"}]
